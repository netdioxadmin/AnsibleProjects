---
  - name: Install Wordpress in Ubuntu and Amazon Linux
    hosts: ubuntu
    become: true
    # vars_prompt:
    #   - name: username
    #     prompt: Enter the Extra DB Username
    #   - name: password
    #     prompt: Enter the Extra DB password
    #     private: true
    #   - name: database
    #     prompt: Enter the Extra Database name
    tasks:
# Updating Cache Amazon Linux
      - name: Update Cache in Amazon Linux.
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        yum:
          name: "*"
          state: present
        tags:
          - lamp
# Installaing Packages in Amazon Linux
      - name : Installing Packages in Amazon Linux
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        yum:
          name: "{{ amazon_packages }}"
          state: present
        tags:
          - lamp
# Installing PHP
      - name: Install php In Amazon linux
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        shell: amazon-linux-extras install php7.4 -y
        tags:
          - lamp
# Creating Httpd-Config
      - name: Creating Httpd confing in Amazon Linux
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        template:
          src: ./httpd.conf
          dest: /etc/httpd/conf/httpd.conf
        register: conf_status
        tags:
          - lamp
# Restarting Httpd-Service
      - name: Restart Httpd service
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon" and conf_status.changed == true
        service:
          name: "{{item}}"
          state: restarted
        with_items:
           - httpd
           - php-fpm
        tags:
          - lamp
# Creating Test.php to check if Php is working Properly
      - name: Testing is Php is working or not
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        copy:
           src: "{{item}}"
           dest: /var/www/html/{{domain_name}}
           owner: "{{httpd_user}}"
           group: "{{httpd_user}}"
        with_items:
           - test.php
           - index.html
        tags:
          - lamp
#MySql
# Restarting MariaDB
      - name: Restarting Mariadb In Amazon Linux
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        service:
          name: mariadb
          state: started
        tags:
          - lamp
          - wordpress
          - drupal
# Installing Python Module for Mysql
      - name: Installing Pip Module
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        pip:
          name: MySQL-python
          state: present
        tags:
          - lamp
          - wordpress
          - drupal
# Creating My.cnf
      - name: creating mycnf for Mariadb
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        template:
           src: ./mycnfsample
           dest: /root/.my.cnf
        tags:
          - mysql
          - wordpress
          - drupal
 # Setting Root Password
      - name: Setting Root password
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        mysql_user:
          check_implicit_admin: yes
          config_file: /root/.my.cnf
          host_all: true
          user: root
          password: "{{ mysqlrootpass }}"
          login_unix_socket: /var/lib/mysql/mysql.sock
        tags:
          - mysql
          - wordpress
          - drupal
# Removing Anonymous User
      - name: "Mariadbd-Server - Removing Anonymous user"
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        mysql_user:
            user: ""
            host_all: true
            state: absent
        tags:
          - mysql
          - wordpress
          - drupal
# Removing Test Database
      - name: "Removing Test database"
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        mysql_db:
           name: "test"
           state: absent
        tags:
          - mysql
          - wordpress
          - drupal
# Wordpress
# Creating Vurtual Host Config For Wordpress
      - name: Creating Virtualhost Config
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        template:
          src: ./wp_amazon_default_sample.conf
          dest: /etc/httpd/conf.d/wordpress.conf
        tags:
          - wordpress
# Creating Document Root for Wordpress
      - name: Create virtual Document Root {{domain_name}}
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        file:
          path: /var/www/html/{{domain_name}}
          state: directory
          owner: "{{httpd_user}}"
          group: "{{httpd_user}}"
        tags:
          - wordpress
# Creating Wordpress db
      - name: Create a Worpress db
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        mysql_db:
           name: "{{ wp_database }}"
           state: present
        tags:
          - wordpress
# Creat Wordpress User for DB and Grant Privileges
      - name: create a wordpress user
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        mysql_user:
             user: "{{ wp_user }}"
             host: "%"
             password: "{{ wp_password }}"
             priv: '{{ wp_database }}.*:ALL'
             state: present
        tags:
          - wordpress
# Downloading Wordpress
      - name: Download Wordpress
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        get_url:
          url: "{{ wp_url }}"
          dest: /tmp/wordpress.zip
        tags:
          - wordpress
# Unzipping Wordpress Files
      - name: unzip wordpress file
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        unarchive:
          src: /tmp/wordpress.zip
          dest: /tmp/
          remote_src: true
        tags:
          - wordpress
# Copy Wordpress Files to Document Root
      - name: copy wordpress file to document root {{domain_name}}
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        copy:
          src: /tmp/wordpress/
          dest: /var/www/html/{{domain_name}}
          owner: "{{httpd_user}}"
          group: "{{httpd_user}}"
          remote_src: true
        tags:
          - wordpress
# Config Wp _Config  To Accomadate Database in Config File
      - name: Config wp-config to Accomadate Database
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        template:
          src: ./wp-config-sample.php
          dest: /var/www/html/{{domain_name}}/wp-config.php
          owner: "{{httpd_user}}"
          group: "{{httpd_user}}"
        tags:
          - wordpress
#Drupal
# Creating Vurtual Host Config For Drupal
      - name: Creating Virtualhost Config
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        template:
          src: ./drupal_amazon_default_sample.conf
          dest: /etc/httpd/conf.d/drupal.conf
        tags:
          - drupal
# Creating Document Root for Drupal
      - name: Create virtual Document Root {{drupal_domain_name}}
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        file:
          path: /var/www/html/{{drupal_domain_name}}
          state: directory
          owner: "{{httpd_user}}"
          group: "{{httpd_user}}"
        tags:
          - drupal
# Creating drupal db
      - name: Create a drupal db
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        mysql_db:
           name: "{{ drupal_database }}"
           state: present
        tags:
          - drupal
# Creating Drupal user
      - name: create a drupal user
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        mysql_user:
             user: "{{ drupal_user }}"
             host: "%"
             password: "{{ drupal_password }}"
             priv: '{{ drupal_database }}.*:ALL'
             state: present
        tags:
          - drupal
# Downloading Drupal- name: Download drupal
      - name: Download Drupal
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        get_url:
          url: "{{ drupal_url }}"
          dest: /tmp/drupal.zip
        tags:
          - drupal
# Unzipping Drupal Files
      - name: unzip drupal file
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        unarchive:
          src: /tmp/drupal.zip
          dest: /tmp/
          remote_src: true
        tags:
          - drupal
# Copy Drupal Files to Document Root
      - name: Copy drupal file to Document root {{drupal_domain_name}}
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        copy:
          src: /tmp/drupal-9.4.8/
          dest: /var/www/html/{{drupal_domain_name}}
          owner: "{{httpd_user}}"
          group: "{{httpd_user}}"
          remote_src: true
        tags:
          - drupal
# Validation
# Checking Httpd Syntax
      - name: Httpd Config check
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        shell: apachectl -t
        register: amazonsyntaxcheck_status
        tags:
          - lamp
          - wordpress
          - drupal
# Printing Http Configcheck  Status
      - name: Print Debug Output
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        debug:
           var: amazonsyntaxcheck_status
        tags:
           - lamp
# Restart If Syntax is okay
      - name: Restart httpd if syntax is okay
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon" and amazonsyntaxcheck_status.stderr == "Syntax OK" and  conf_status.changed == true
        service:
          name: "{{item}}"
          state: restarted
          enabled: true
        with_items:
          - httpd
          - php-fpm.service
        tags:
          - lamp
          - wordpress
          - drupal
# Clean Up files After Installation
      - name: Cleanup
        when: ansible_os_family == "RedHat" and ansible_distribution == "Amazon"
        file:
          path: "{{ item }}"
          state: absent
        with_items:
          - "/tmp/wordpress.zip"
          - "/tmp/wordpress/"
          - "/var/www/html/index.html"
          - "/var/www/html/{{domain_name}}/index.html"
          - "/tmp/drupal-9.4.8/"
          - /tmp/drupal.zip

        tags:
          - wordpress
          - drupal

            ############################################## Ubuntu #########################################
# Updating Cache In Ubuntu
      - name: Update Cache in Ubuntu Linux.
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        apt:
          update_cache: true
        tags:
          - lamp
          - wordpress
          - drupal
# Installing Ubuntu Packages
      - name : Installing Packages in Ubunt Linux
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        apt:
          name: "{{ ubuntu_packages }}"
          state: present
        tags:
          - lamp
# Setup Apache Config Ports
      - name: Changing Port for Apache In Ubuntu
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        template:
          src: ./ports.conf
          dest: /etc/apache2/ports.conf
        register: port_status
        tags:
          - lamp
# Restart Apache2 server
      - name: Restart apache2
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu" and port_status.changed == true
        service:
          name: "{{item}}"
          state: restarted
        with_items:
          - apache2
          - php8.1-fpm.service
        tags:
          - lamp
# Disabling Default Confing File
      - name: "Removing default conf"
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        file:
          path: /etc/nginx/sites-enabled/000-default.conf
          state: absent
        ignore_errors: true
        tags:
           - lamp
# Test Page for php
      - name: Testing page to test php
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        copy:
           src: "{{item}}"
           dest: /var/www/html/{{domain_name}}
           owner: "{{apache_user}}"
           group: "{{apache_user}}"
        with_items:
           - test.php
           - index.html
        tags:
          - lamp
#MySql
# Restarting Mariadb
      - name: Restarting Mariadb In ubuntu Linux
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        service:
          name: mariadb
          state: started
          enabled: true
        tags:
          - lamp
# Creating my.cnf
      - name: creating mycnf for Mariadb
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        template:
           src: ./mycnfsample
           dest: /root/.my.cnf
        tags:
          - lamp
# Install Python Module
      - name: Python Module install
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        pip:
           name: pymysql
           state: present
        tags:
          - lamp
# Setting Mysql root Password
      - name: Setting Root password
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        mysql_user:
           check_implicit_admin: yes
           config_file: /root/.my.cnf
           user: root
           password: "{{mysqlrootpass}}"
           host_all: true
           login_unix_socket: /run/mysqld/mysqld.sock
        tags:
          - lamp
# Removing Anonymous User
      - name: "Mariadbd-Server - Removing Anonymous user"
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        mysql_user:
            user: ""
            host_all: true
            state: absent
        tags:
          - lamp
# Removing Test Database
      - name: "Removing Test database"
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        mysql_db:
            name: "test"
            state: absent
        tags:
          - lamp
# Wordpress
# Create virtual config for Wordpress
      - name: Creating Virtualhost Config
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        template:
          src: ./wp_ubuntu_default_sample.conf
          dest: /etc/apache2/sites-available/{{domain_name}}.conf
        tags:
          - wordpress

# Enabling Virtual Confing Wordpress
      - name: Enabling Virtual Host Config
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        file:
           src: /etc/apache2/sites-available/{{domain_name}}.conf
           dest: /etc/apache2/sites-enabled/{{domain_name}}.conf
           state: link
        tags:
          - wordpress
# Creating Document Root Wordpress
      - name: Create Document Root  Directory
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        file:
          path: /var/www/html/{{domain_name}}
          state: directory
          owner: "{{apache_user}}"
          group: "{{apache_user}}"
        tags:
          - wordpress
# Creating Db for Word Press
      - name: Create a Worpress db
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        mysql_db:
            name: "{{ wp_database }}"
            state: present
        tags:
          - wordpress
# Creating Wordpress Db user
      - name: create a wordpress user
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        mysql_user:
             user: "{{ wp_user }}"
             host: "%"
             password: "{{ wp_password }}"
             priv: '{{ wp_database }}.*:ALL'
             state: present
        tags:
          - wordpress
  # Downloading Wordpress Files
      - name: Download Wordpress
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        get_url:
          url: "{{wp_url}}"
          dest: /tmp/wordpress.zip
        tags:
          - wordpress
# Extracting Wordpress Files
      - name: unzip wordpress file
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        unarchive:
          src: /tmp/wordpress.zip
          dest: /tmp/
          remote_src: true
        tags:
          - wordpress
# Copying Wordpress to Document Root
      - name: copy wordpress file to document root {{domain_name}}
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        copy:
          src: /tmp/wordpress/
          dest: /var/www/html/{{domain_name}}
          owner: "{{apache_user}}"
          group: "{{apache_user}}"
          remote_src: true
        tags:
          - wordpress
# Configure Wp-config.php to Accomadate wp-database
      - name: Config wp-config to Accomadate Database
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        template:
          src: ./wp-config-sample.php
          dest: /var/www/html/{{domain_name}}/wp-config.php
          owner: "{{apache_user}}"
          group: "{{apache_user}}"
        tags:
          - wordpress
# Drupal
# Creating Virtual Host Config For Drupal
      - name: Creating Virtualhost Config
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        template:
          src: ./drupal_ubuntu_default_sample.conf
          dest: /etc/apache2/sites-available/{{drupal_domain_name}}.conf
        tags:
          - drupal
# Enabling Virtual Confing Drupal
      - name: Enabling Virtual Host Config
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        file:
           src: /etc/apache2/sites-available/{{drupal_domain_name}}.conf
           dest: /etc/apache2/sites-enabled/{{drupal_domain_name}}.conf
           state: link
        tags:
          - drupal
# Creating Document Root Drupal
      - name: Create Document Root  Directory for {{drupal_domain_name}}
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        file:
          path: /var/www/html/{{drupal_domain_name}}
          state: directory
          owner: "{{apache_user}}"
          group: "{{apache_user}}"
        tags:
          - drupal
# Creating drupal db
      - name: Create a drupal db
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        mysql_db:
           name: "{{ drupal_database }}"
           state: present
        tags:
          - drupal
# Creating Drupal user and Grant Privileges
      - name: create a drupal user
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        mysql_user:
             user: "{{ drupal_user }}"
             host: "%"
             password: "{{ drupal_password }}"
             priv: '{{ drupal_database }}.*:ALL'
             state: present
        tags:
          - drupal
# Downloading Drupal
      - name: Download drupal
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        get_url:
          url: "{{drupal_url}}"
          dest: /tmp/drupal.zip
        tags:
          - drupal
# Extracting Drupal Files
      - name: unzip drupal file
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        unarchive:
          src: /tmp/drupal.zip
          dest: /tmp/
          remote_src: true
        tags:
          - drupal
 # Copying Drupal to Document Root
      - name: copy wordpress file to document root {{drupal_domain_name}}
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        copy:
          src: /tmp/drupal-9.4.8/
          dest: /var/www/html/{{drupal_domain_name}}
          owner: "{{apache_user}}"
          group: "{{apache_user}}"
          remote_src: true
        tags:
          - drupal
# Validation
# Checking Http Config
      - name: Httpd Config check
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        shell: apachectl -t
        register: ubuntusyntaxcheck_status
        tags:
          - lamp
          - wordpress
          - drupal
# Printing Debug Output
      - name: print debug output
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        debug:
           var: ubuntusyntaxcheck_status
        tags:
          - lamp
          - wordpress
          - drupal
# Restarting Httpd If Syntax is Okay
      - name: Restart httpd if syntax is okay
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu" and ubuntusyntaxcheck_status.stderr == "Syntax OK" and port_status.changed == true
        service:
          name: "{{item}}"
          state: restarted
          enabled: true
        with_items:
          - apache2
          - php8.1-fpm.service
        tags:
          - lamp
          - wordpress
          - drupal
# Final Clean Up
      - name: Cleanup
        when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu"
        file:
          path: "{{ item }}"
          state: absent
        with_items:
          - "/tmp/wordpress.tar.gz"
          - "/tmp/wordpress/"
          - "/var/www/html/index.html"
          - "/var/www/html/{{domain_name}}/index.html"
          - "/tmp/drupal-9.4.8/"
          - /tmp/drupal.zip
        tags:
          - lamp
          - wordpress
          - drupal
